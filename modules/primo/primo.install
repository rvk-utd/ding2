<?php

/**
 * @file
 * Main install file for Primo.
 */

define('PRIMO_FACET_MATERIAL_TYPE', 'rtype');

/**
 * Implements hook_requirements().
 */
function primo_requirements($phase) {
  if ($phase !== 'runtime') {
    return [];
  }

  $t = get_t();

  // Make sure we have our material types mapped.
  $material_type_req = [ 'title' => 'Primo material types' ];

  // Do a dummy search with the intent of returning as many results as possible.
  // We are not really interested in the results but in the facets they cover.
  $result = primo_client()->search([ 'query' => 'any,contains,a' ], 1, 1);
  $facet = $result->getFacet(PRIMO_FACET_MATERIAL_TYPE);
  if (!empty($facet)) {
    $material_types = $facet->getValues();
    $material_type_map = variable_get('primo_material_type_map', []);
    $mapped_material_type_ids = array_intersect_key($material_types, $material_type_map);
    $material_type_req += [
      'value' => $t(
        '%num_material_types mapped material types',
        ['%num_material_types' => count($mapped_material_type_ids)]
      )
    ];

    $unmapped_material_type_ids = array_diff_key($material_types, $material_type_map);
    if (empty($unmapped_material_type_ids)) {
      $material_type_req += [
        'severity' => REQUIREMENT_OK
      ];
    }
    else {
      $material_type_req += [
        'description' => $t('Material type codes %material_types do not have patron-friendly versions. Please <a href="@primo_map_url">map them</a>.',
          [
            '%material_types' => implode(', ', array_keys($unmapped_material_type_ids)),
            '@primo_map_url' => url('admin/config/primo/mapping')
          ]
        ),
        'severity' => REQUIREMENT_WARNING
      ];
    }
  }
  else {
    $material_type_req += [
      'description' => $t('Unable to extract material type facet %facet from search result.',
        ['%facet' => PRIMO_FACET_MATERIAL_TYPE]
      ),
      'severity' => REQUIREMENT_ERROR
    ];
  }

  return [
    'primo_material_types' => $material_type_req,
  ];
}

/**
 * Implements hook_schema().
 */
function primo_schema() {
  $schema = [];
  // Cache table used by _primo_cache_get/set.
  $schema['cache_primo'] = drupal_get_schema_unprocessed(
    'system',
    'cache'
  );
  return $schema;
}

/**
 * Implements hook_install().
 *
 * Set default during installation.
 */
function primo_install() {
  primo_install_set_defaults();
}

/**
 * Set defaults for Primo.
 *
 * This function may override existing settings.
 */
function primo_install_set_defaults() {
  primo_install_set_facet_defaults();
}

/**
 * Setup default facets.
 */
function primo_install_set_facet_defaults() {
  $facets = [
    [
      'name' => 'facet_creator',
      'title' => 'Creator',
      'sorting' => 'default',
      'weight' => '-5',
    ],
    [
      'name' => 'facet_lang',
      'title' => 'Language',
      'sorting' => 'default',
      'weight' => '-4',
    ],
    [
      'name' => 'facet_rtype',
      'title' => 'Material type',
      'sorting' => 'default',
      'weight' => '-3',
    ],
    [
      'name' => 'facet_topic',
      'title' => 'Topic',
      'sorting' => 'default',
      'weight' => '-2',
    ],
    [
      'name' => 'facet_creationdate',
      'title' => 'Year',
      'sorting' => 'numeric_reverse',
      'weight' => '-1',
    ],
    [
      'name' => 'facet_genre',
      'title' => 'Genre',
      'sorting' => 'default',
      'weight' => '0',
    ],
  ];

  variable_set('ding_facetbrowser_facets', $facets);
}

/**
 * Add cache table to cache objects we generate from searches.
 */
function primo_update_7001() {
  $schema = primo_schema();
  $ret = [];
  $ret[] = db_create_table('cache_primo', $schema['cache_primo']);
  return $ret;
}

/**
 * Set defaults for Primo.
 */
function primo_update_7002() {
  primo_install_set_defaults();
}
