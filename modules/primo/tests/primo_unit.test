<?php

use Drupal\ding_test\DingUnitTestBase;
use Primo\Ting\PrimoStatementRenderer;
use Ting\Search\BooleanStatementGroup;
use Ting\Search\BooleanStatementInterface;
use Ting\Search\TingSearchCommonFields;
use Ting\Search\TingSearchFieldFilter;
use Ting\Search\TingSearchStrategyInterface;
use Ting\Search\UnsupportedSearchQueryException;

/**
 * Unittests for the Primo search provider.
 */
class PrimoSearchUnitTest extends DingUnitTestBase {

  protected $mapping;

  /**
   * Register the unittest.
   */
  public static function getInfo() {
    return array(
      'name' => 'Ding search Unittests',
      'description' => 'Unit-tests that tests the primo search provider.',
      'group' => 'Primo',
      'dependencies' => array('primo'),
    );
  }

  /**
   * Setup autoloading.
   */
  public function setUp() {
    // Parent sets up autoloading and our test-dependencies so get it in the
    // loop as quickly as possible.
    parent::setUp();

    // Any subsequent setup goes here.
    // Setup a renderer configured to use our own mapping of fields.
  }

  /**
   * Test that the PrimoStatementRenderer can render groups.
   *
   * @throws \Exception
   */
  public function testStatementGroupRendererGroups() {
    // See https://developers.exlibrisgroup.com/primo/apis/webservices/xservices/search/briefsearch
    // The Brief exservice search endpoint has a couple of limitations.
    // - A filter is implented using one or more "query" parameters where each
    //   references exactly _one_ field.
    // - A query compares a field against one or more values joined by a single
    // - Each query is AND'ed together, no way of changing it.

    // Target:
    // ?query=author,contains,JK AND Rowlings&query=title,contains,Harry
    // ?query=author,contains,JK AND Rowlings&query=title,contains,Harry
    // ?query=author,contains,JK&query=author,contains,JK&Rowlings&query=title,contains,Harry
    // If the group is OR or NOT joined, the field has to be the same
    // If the group is AND joined, it may as well not be a group.


    $group1 = new BooleanStatementGroup([
      new TingSearchFieldFilter(TingSearchCommonFields::AUTHOR, 'Rowlings'),
      new TingSearchFieldFilter(TingSearchCommonFields::AUTHOR, 'JK'),
    ]);
    $expected_result['query'][] = 'creator,exact,Rowlings AND JK';

    $group2 = new BooleanStatementGroup([
      new TingSearchFieldFilter(TingSearchCommonFields::TITLE, 'Harry'),
    ]);
    $expected_result['query'][] = 'title,exact,Harry';

    $renderer = new PrimoStatementRenderer(_primo_common_field_mapping());
    $rendered = $renderer->renderStatements([$group1, $group2]);

    // Test that the query ends up as we expect.
    $this->assertEqual($expected_result, $rendered);
  }

  /**
   * Test that the PrimoStatementRenderer can escape values.
   *
   * @throws \Exception
   */
  public function testStatementGroupRendererEscaping() {
    $renderer = new PrimoStatementRenderer(_primo_common_field_mapping());
    $expected_result = [];

    // Test we can escape values.
    // Should be ok.
    $filters[] = new TingSearchFieldFilter('field1', 'someANDvalue');
    $expected_result['query'][] = 'field1,exact,someANDvalue';

    // Should "AND" should be removed.
    $filters[] = new TingSearchFieldFilter('field2', 'some AND value');
    $expected_result['query'][] = 'field2,exact,some value';

    // Should "OR" should be removed.
    $filters[] = new TingSearchFieldFilter('field3', 'some OR value');
    $expected_result['query'][] = 'field3,exact,some value';

    // Commas should be replaced with spaces.
    $filters[] = new TingSearchFieldFilter('field4', 'some,value');
    $expected_result['query'][] = 'field4,exact,some value';

    $rendered = $renderer->renderStatements($filters);

    // Test that the query ends up as we expect.
    $this->assertEqual($expected_result, $rendered);
  }

  /**
   * Test that PrimoStatementRenderer can handle AND groups between fields.
   */
  public function testStatementGroupRendererAndGroups() {
    $renderer = new PrimoStatementRenderer(_primo_common_field_mapping());
    $expected_result = [];

    // "AND" groups should be rewritten to individual query= statements.
    $filters[] = new BooleanStatementGroup([
      new TingSearchFieldFilter('field1', 'value1'),
      new TingSearchFieldFilter('field2', 'value2'),
    ], BooleanStatementGroup::OP_AND);
    $expected_result['query'][] = 'field1,exact,value1';
    $expected_result['query'][] = 'field2,exact,value2';

    // The two statements above should be added the same way as the following.
    $filters[] = new TingSearchFieldFilter('field3', 'value3');
    $expected_result['query'][] = 'field3,exact,value3';

    $rendered = $renderer->renderStatements($filters);

    // Test that the query ends up as we expect.
    $this->assertEqual($expected_result, $rendered);
  }

  /**
   * Test that the PrimoStatementRenderer fails handling or groups.
   *
   * Primo can't handle ORs between different fields.
   */
  public function testStatementGroupRendererRejectGroups() {
    $renderer = new PrimoStatementRenderer(_primo_common_field_mapping());

    // The following should fail as we're ORring different fields.
    $filters[] = new BooleanStatementGroup([
      new TingSearchFieldFilter('field1', 'value1'),
      new TingSearchFieldFilter('field2', 'value2'),
    ], BooleanStatementGroup::OP_OR);

    // Test that the query is rejected.
    try {
      $renderer->renderStatements($filters);
    }
    catch (UnsupportedSearchQueryException $e) {
      // All is ok.
      $this->pass("Expected exception is thrown");
      return;
    }

    // The renderer should have thrown an exception.
    $this->fail('Expected exception to be trown');
  }

  /**
   * Test we can't add an invalid field filter to a statement.
   */
  public function testInvalidFieldFilter() {
    $invalid = (object) [];

    $renderer = new PrimoStatementRenderer(_primo_common_field_mapping());
    // Test that the filter is rejected.
    try {
      $renderer->preprocessStatements([$invalid]);
    }
    catch (UnsupportedSearchQueryException $e) {
      // All is ok.
      $this->pass("Expected exception is thrown");
      return;
    }

    // The renderer should have thrown an exception.
    $this->fail('Expected exception to be trown');
  }

}
