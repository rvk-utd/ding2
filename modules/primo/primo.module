<?php

/**
 * @file
 * Main module file for Primo.
 */

use Concat\Http\Middleware\Logger;
use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use Drupal\PSR3\Logger\Watchdog;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\MessageFormatter;
use Primo\BriefSearch\Client;
use Primo\BriefSearch\Document;
use Primo\Exception\TransferException;
use Primo\Ting\ObjectMapper;
use Primo\Ting\Result;
use Ting\Search\TingSearchCommonFields;

// Cache entry type.
define('PRIMO_CACHE_TING_OBJECT', 'primo-object');
define('PRIMO_DEFAULT_CACHE_LIFETIME', 900);
define('PRIMO_STATIC_CACHE', 'primo.module:_primo_cache');

/**
 * Implements hook_ding_provider().
 */
function primo_ding_provider() {
  return array(
    'title' => 'Primo provider',
    'settings' => 'primo_settings_form',
    'provides' => array(
      'search' => array(
        'prefix' => 'search',
        'file' => 'includes/primo.search.inc',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function primo_menu() {
  $items = array();

  $items['admin/config/primo'] = array(
    'title' => 'Primo',
    'description' => 'Manage Primo integration settings.',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // This provides alternate access to provider settings.
  $items['admin/config/primo/settings'] = array(
    'title' => 'Provider settings',
    'description' => 'Base settings for the Primo integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('primo_settings_form'),
    'access arguments' => array('administer primo settings'),
    'file' => 'primo.admin.inc',
    'weight' => -1,
  );

  $items['admin/config/primo/mapping'] = array(
    'title' => 'Code mapping',
    'description' => 'Configure mapping between Primo codes and end-user text',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('primo_code_mapping_form'),
    'access arguments' => array('administer primo settings'),
    'file' => 'primo.admin.inc',
  );

  // We also provide a cover implementation. Add a shortcut to the settings form
  // under the cover settings as well.
  $items['admin/config/ting/covers/primo'] = array(
    'title' => 'Primo',
    'description' => 'Configure integration with Primo service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('primo_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'primo.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function primo_permission() {
  return array(
    'administer primo settings' => array(
      'title' => t('Administer Primo settings'),
    ),
  );
}

/**
 * Get a configured client for the Primo Brief Search service ready for use.
 *
 * @return \Primo\BriefSearch\Client
 *   The client.
 */
function primo_client() {
  $handler = HandlerStack::create();

  if (variable_get('primo_enable_logging')) {
    $watchdog = new Watchdog();
    $watchdog->setWatchdogType('primo');
    $formatter = new MessageFormatter(
      'Request: {method} {uri}. Response: {code} {res_header_content-type} {res_header_content-length}'
    );

    $logger = new Logger($watchdog, $formatter);
    $handler->push($logger, 'logger');
  }

  return new Client(
    new GuzzleClient([
      'handler' => $handler,
      'base_uri' => variable_get('primo_base_url')
    ]),
    variable_get('primo_institution_code'),
    ip_address(),
    variable_get('primo_location_scopes', '')
  );
}

/**
 * Implements hook_ting_covers().
 */
function primo_ting_covers($entities) {
  // A map from entity ids to urls for corresponding covers.
  $covers = array();

  $ids = array_map(function(TingEntity $entity) {
    return $entity->ding_entity_id;
  }, $entities);

  try {
    $client = primo_client();
    $documents = $client->documents($ids);

    $thumbnail_urls = array_map(function(Document $document) {
      return $document->getThumbnailUrls();
    }, $documents);

    array_walk(
      $thumbnail_urls,
      function(array &$thumbnail_urls, $record_id) {
        $thumbnail_urls = array_filter($thumbnail_urls, function ($url) use ($record_id) {
          // Primo may return thumbnail urls to resources which are in fact not
          // images. In fact some are not working at all. Request each of them
          // to remove irrelevant ones. Use HEAD as we only care about status
          // code and content type here.
          $client = primo_client();
          return $client->validateThumbnail($url);
        });

        // We can only handle a single thumbnail so only use the first.
        $thumbnail_urls = array_shift($thumbnail_urls);
      }
    );

    $covers = $thumbnail_urls;
  }
  catch (TransferException $e) {
    // Do nothing. If an exception occurs then we simply to not return any
    // covers from Primo.
  }

  return $covers;
}

/**
 * Implements hook_xautoload().
 */
function primo_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->addPsr4(
    'Primo',
    'src/Primo'
  );
}

/**
 * Implements hook_libraries_info().
 */
function primo_libraries_info() {
  return array(
    'log' => array(
      'name' => 'PSR Log',
      'vendor url' => 'https://github.com/php-fig/log',
      'download url' => 'https://github.com/php-fig/log',
      'version' => '1.0.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'guzzle-log-middleware' => array(
      'name' => 'Guzzle logging middleware',
      'vendor url' => 'https://github.com/rtheunissen/guzzle-log-middleware',
      'download url' => 'https://github.com/rtheunissen/guzzle-log-middleware',
      'version' => 'v0.4.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'iso-639' => array(
      'name' => 'PHP ISO-639 library',
      'vendor url' => 'https://github.com/matriphe/php-iso-639',
      'download url' => 'https://github.com/matriphe/php-iso-639',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function primo_module_implements_alter(&$implementations, $hook) {
  // TODO Remove once the Primo provider is fully implemented
  // Ding does not support mixing multiple partial implementations of a provider
  // so we fall back to OpenSearch while we implement Primo. Thus we need to
  // OpenSearch enabled but not make it act as a provider.
  if ($hook === 'ding_provider') {
    unset($implementations['opensearch']);
  }
}

/**
 * Get cached entry from the primo cache.
 *
 * @param string $id
 *   The id (a Primo record id for objects).
 * @param string $type
 *   The type of data to cache, which is used to set the cache id. See
 *   PRIMO_CACHE_* constants.
 *
 * @return mixed
 *   The cached item based on the $type and $id given. If non found in the cache
 *   NULL is returned.
 */
function _primo_cache_get($id, $type = PRIMO_CACHE_TING_OBJECT) {
  $cid = $type . ':' . $id;

  if ($ttl = variable_get('primo_cache_lifetime', PRIMO_DEFAULT_CACHE_LIFETIME)) {
    $cache = cache_get($cid, 'cache_primo');
    if ($cache && ($cache->expire > REQUEST_TIME)) {
      // Return the cache entry if it has not been expired.
      return $cache->data;
    }
  }
  else {
    // Without proper caching, use a static cache that only works on pr.
    // request.
    $cache = &drupal_static(PRIMO_STATIC_CACHE);
    if (isset($cache) && array_key_exists($cid, $cache)) {
      return $cache[$cid];
    }
  }
  return FALSE;
}

/**
 * Writes a cache entry.
 *
 * @param string $id
 *   The id (a Primo record id for objects).
 * @param mixed $value
 *   The value to store in the cache.
 * @param string $type
 *   The type of data to cache, which is used to set the cache id. See
 *   PRIMO_CACHE_* constants.
 */
function _primo_cache_set($id, $value, $type = PRIMO_CACHE_TING_OBJECT) {
  // Define the cache id.
  $cid = $type . ':' . $id;

  if ($ttl = variable_get('primo_cache_lifetime', PRIMO_DEFAULT_CACHE_LIFETIME)) {
    cache_set($cid, $value, 'cache_primo', REQUEST_TIME + $ttl);
  }
  else {
    // Without proper caching, use a request-scoped static cache.
    $cache = &drupal_static(PRIMO_STATIC_CACHE, []);
    $cache[$cid] = $value;
  }
}

/**
 * Implements hook_flush_caches().
 */
function primo_flush_caches() {
  // We have our own cache that core should be aware of.
  return array('cache_primo');
}

/**
 * Map Primo documents to Objects and insert them into the cache.
 *
 * @param \Primo\BriefSearch\Document[] $documents
 *   The documents to be mapped.
 *
 * @return \Ting\TingObjectInterface[]
 *   Mapped objects that has been inserted into the cache.
 */
function _primo_search_map_and_warm_cache_documents(array $documents) {
  return array_map(
    function (Document $document) {
      $record_id = $document->getRecordId();
      if (FALSE === ($object = _primo_cache_get($record_id))) {
        // Map the Document to an object and write it to the cache.
        $mapper = new ObjectMapper($document);
        $object = $mapper->map();
        _primo_cache_set($record_id, $object);
      }
      return $object;
    }, $documents
  );
}

/**
 * Map Documents in a Primo Result into Objects and insert them into the cache.
 *
 * @param \Primo\Ting\Result $ting_result
 *   The Result with Documents to be mapped.
 *
 * @return \Ting\TingObjectInterface[]
 *   Mapped objects that has been inserted into the cache.
 */
function _primo_search_map_and_warm_cache_result(Result $ting_result) {
  return _primo_search_map_and_warm_cache_documents($ting_result->getPrimoSearchresult()->getDocuments());
}

/**
 * Maps SAL "common fields" to primo fields.
 *
 * @return array
 *   The mapped fields.
 */
function _primo_common_field_mapping() {
  return [
    TingSearchCommonFields::TITLE => 'title',
    TingSearchCommonFields::ACQUISITION_DATE => 'created',
    TingSearchCommonFields::AUTHOR => 'creator',
    // Top level categories.
    TingSearchCommonFields::CATEGORY => 'facet_tlevel',
    TingSearchCommonFields::LANGUAGE => 'lang',
    TingSearchCommonFields::MATERIAL_TYPE => 'rtype',
    TingSearchCommonFields::SUBJECT => 'sub',
  ];
}

/**
 * Add custom description to ting_search_carousel query field.
 */
function primo_form_ting_search_carousel_admin_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'primo_validate_carousel_queries';

  $description = '<p><ul>' . t(
    '<li><b>' . 'Raw query' . ':</b> ' . "@raw_query" . '</li>' .
    '<li><b>' . 'Comma separated IDs' . ':</b> ' . "@id_query" . '</li>' .
    '<li><b>' . 'Title' . ':</b> ' . "@title_query" . '</li>',
    [
      '@raw_query' => 'title,contains,harry+potter',
      '@id_query' => '[ICE01_PRIMO_TEST001199069,ICE01_PRIMO_TEST001177712]',
      '@title_query' => '[Harry Potter]'
    ]
  ) . '</ul></p>';

  foreach ($form['ting_search_carousel']['ting_searches'] as &$search) {
    $search["query[]"]['#description'] .= $description;
  }
}

/**
 * Custom validation for the ting_search_carousel.
 * Do not allow a mixture of ID and text search.
 */
function primo_validate_carousel_queries($form, &$form_state) {
  $institution_code = variable_get('primo_institution_code');

  foreach ($form_state['input']['query'] as $key => $query) {
    $query_texts = explode(',', trim($query, '[]'));
    $ids = 0;
    $texts = 0;
    foreach ($query_texts as $query_text) {
      preg_match("/$institution_code/", $query_text) === 1 ? $ids++ : $texts++;
    }
    if ($ids > 0 && $texts > 0) {
      form_set_error('query[]', t(
        "You can't mix IDs and text searches. Valid examples: 
        '[ICE01_PRIMO_TEST001199069,ICE01_PRIMO_TEST001177712]' or '[harry potter']"
        )
      );
    }
  }
}
