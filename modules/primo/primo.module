<?php

/**
 * @file
 * Main module file for Primo.
 */

use Concat\Http\Middleware\Logger;
use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use drupol\drupal7_psr3_watchdog\Logger\WatchdogLogger;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\MessageFormatter;
use Primo\BriefSearch\Client;
use Primo\BriefSearch\Document;
use Primo\Exception\TransferException;

/**
 * Implements hook_ding_provider().
 */
function primo_ding_provider() {
  return array(
    'title' => 'Primo provider',
    'settings' => 'primo_settings_form',
    'provides' => array(
      'search' => array(
        'prefix' => 'search',
        'file' => 'includes/primo.search.inc',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function primo_menu() {
  $items = array();

  // We also provide a cover implementation. Add a shortcut to the settings form
  // under the cover settings as well.
  $items['admin/config/ting/covers/primo'] = array(
    'title' => 'Primo',
    'description' => 'Configure integration with Primo service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('primo_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Setting form for Primo configuration.
 *
 * @return []
 *   A Form API array
 */
function primo_settings_form() {
  $form = array();

  $form['primo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Primo service settings'),
    '#tree' => FALSE,
  );

  $form['primo']['primo_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('Base URL for Primo service.'),
    '#required' => TRUE,
    '#default_value' => variable_get('primo_base_url', ''),
  );

  $form['primo']['primo_institution_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Institution code'),
    '#description' => t('Relevant for restricted scopes or for when searching against Primo Central.'),
    '#required' => TRUE,
    '#default_value' => variable_get('primo_institution_code', ''),
  );

  $form['primo']['primo_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('primo_enable_logging', FALSE),
    '#description' => t('Logs requests to the Primo webservice.'),
  );

  return system_settings_form($form);
}

/**
 * Get a configured client for the Primo Brief Search service ready for use.
 *
 * @return \Primo\BriefSearch\Client
 *   The client.
 */
function primo_client() {
  $handler = HandlerStack::create();

  if (variable_get('primo_enable_logging')) {
    $watchdog = new WatchdogLogger('primo');
    $formatter = new MessageFormatter(
      'Request: {method} {uri}. Response: {code} {res_header_content-type} {res_header_content-length}'
    );

    $logger = new Logger($watchdog, $formatter);
    $handler->push($logger, 'logger');
  }

  return new Client(
    new GuzzleClient([
      'handler' => $handler,
      'base_uri' => variable_get('primo_base_url')
    ]),
    variable_get('primo_institution_code'),
    ip_address()
  );
}

/**
 * Implements hook_ting_covers().
 */
function primo_ting_covers($entities) {
  // A map from entity ids to urls for corresponding covers.
  $covers = array();

  $ids = array_map(function(TingEntity $entity) {
    return $entity->ding_entity_id;
  }, $entities);

  try {
    $client = primo_client();
    $documents = $client->documents($ids);

    $thumbnail_urls = array_map(function(Document $document) {
      return $document->getThumbnailUrls();
    }, $documents);

    array_walk(
      $thumbnail_urls,
      function(array &$thumbnail_urls, $record_id) {
        $thumbnail_urls = array_filter($thumbnail_urls, function ($url) use ($record_id) {
          // Primo may return thumbnail urls to resources which are in fact not
          // images. In fact some are not working at all. Request each of them
          // to remove irrelevant ones. Use HEAD as we only care about status
          // code and content type here.
          $client = primo_client();
          return $client->validateThumbnail($url);
        });

        // We can only handle a single thumbnail so only use the first.
        $thumbnail_urls = array_shift($thumbnail_urls);
      }
    );

    $covers = $thumbnail_urls;
  }
  catch (TransferException $e) {
    // Do nothing. If an exception occurs then we simply to not return any
    // covers from Primo.
  }

  return $covers;
}

/**
 * Implements hook_xautoload().
 */
function primo_xautoload(LocalDirectoryAdapter $adapter) {
  $adapter->addPsr4(
    'Primo',
    'src/Primo'
  );
}

/**
 * Implements hook_libraries_info().
 */
function primo_libraries_info() {
  return array(
    'log' => array(
      'name' => 'PSR Log',
      'vendor url' => 'https://github.com/php-fig/log',
      'download url' => 'https://github.com/php-fig/log',
      'version' => '1.0.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'guzzle-log-middleware' => array(
      'name' => 'Guzzle logging middleware',
      'vendor url' => 'https://github.com/rtheunissen/guzzle-log-middleware',
      'download url' => 'https://github.com/rtheunissen/guzzle-log-middleware',
      'version' => 'v0.4.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'iso-639' => array(
      'name' => 'PHP ISO-639 library',
      'vendor url' => 'https://github.com/matriphe/php-iso-639',
      'download url' => 'https://github.com/matriphe/php-iso-639',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr3-watchdog' => array(
      'name' => 'Drupal PSR-3 compatible logger',
      'vendor url' => 'https://github.com/drupol/drupal7_psr3_watchdog',
      'download url' => 'https://github.com/drupol/drupal7_psr3_watchdog',
      'version' => 'master',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function primo_module_implements_alter(&$implementations, $hook) {
  // TODO Remove once the Primo provider is fully implemented
  // Ding does not support mixing multiple partial implementations of a provider
  // so we fall back to OpenSearch while we implement Primo. Thus we need to
  // OpenSearch enabled but not make it act as a provider.
  if ($hook === 'ding_provider') {
    unset($implementations['opensearch']);
  }
}
