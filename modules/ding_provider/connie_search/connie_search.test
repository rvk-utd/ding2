<?php
/**
 * @file
 * Connie test-cases.
 */

use Connie\Search\ConnieSearchResult;
use Connie\Search\ConnieTingObject;
use Connie\Search\ConnieTingObjectCollection;

/**
 * @file
 * Test that the example provider implementation module passes the same
 * tests as the real providers.
 */

class ConnieSearchSearchProviderImplementationTestCase extends DingSearchProviderImplementationTestCase {

  /**
   * Return metadata about the test.
   */
  public static function getInfo() {
    return [
      'name' => 'Connie provider example search provider',
      'description' => 'Test Ding! provider example search functionality.',
      'group' => 'Ding! - example provider',
    ];
  }

  /**
   * Indicate which modules this test-class depends on.
   */
  public  function setUp() {
    parent::setUp(['connie_search', 'ding_provider', 'xautoload']);
  }

  /**
   * Expected return-value of search_material_types.
   *
   * @return string[]
   *   List of expected materials.
   */
  public function getMaterials() {
    return ['material_type_1', 'material_type_2'];
  }

  /**
   * Expected return-value of search_object_load.
   *
   * @return \Ting\TingObjectInterface[]
   *   List of expected objects.
   */
  public function getLoadedObjects() {
    return [new ConnieTingObject()];
  }

  /**
   * Expected return-value of search_collection_load.
   *
   * @return \Ting\TingObjectCollectionInterface
   *   The expected collection.
   */
  public function getLoadedCollection() {
    return ConnieTingObjectCollection::getSingleCollection();
  }

  /**
   * Expected return-value of search_search.
   *
   * @return \Ting\Search\TingSearchResultInterface
   *   The expected search result.
   */
  public function getSearchResult() {
    return new ConnieSearchResult();
  }
}
