<?php

/**
 * @file
 * Code for the Aleph feature.
 */

use Drupal\aleph\Aleph\AlephClient;
use Drupal\aleph\Aleph\Handler\AlephPatronHandler;

include_once 'aleph.features.inc';
require __DIR__ . '/vendor/autoload.php';

/**
 * Return array with branch keys and names.
 *
 * @return array
 *    Branch key => Branch name
 */
function aleph_get_branches() {
  return array(
    'BBAAA' => 'Borgarbókasafnið Grófinni',
    'BBFAA' => 'Borgarbókasafnið Spönginni',
    'BBKAA' => 'Borgarbókasafnið Kringlunni',
    'BBSAA' => 'Borgarbókasafnið Sólheimum',
    'BBGAA' => 'Borgarbókasafnið Gerðubergi',
    'BBRAA' => 'Borgarbókasafnið Árbæ',
    'BBNAA' => 'Borgarbókasafnið Norðlingaholti',
  );
}

/**
 * Implements hook_ding_provider().
 */
function aleph_ding_provider() {
  return array(
    'title' => 'Aleph provider',
    'settings' => 'aleph_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => 'includes/aleph.availability.inc',
      ),
      'user_consent' => array(
        'prefix' => 'user_consent',
        'file' => 'includes/aleph.user_consent.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => 'includes/aleph.user.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => 'includes/aleph.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => 'includes/aleph.reservation.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => 'includes/aleph.debt.inc',
      ),
    ),
  );
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function aleph_settings_form() {
  $form = array();

  $form['aleph'] = array(
    '#type' => 'fieldset',
    '#title' => t('Aleph service settings'),
    '#tree' => FALSE,
  );

  $form['aleph']['aleph_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Aleph base URL'),
    '#description' => t('Base URL for Aleph service.'),
    '#required' => TRUE,
    '#default_value' => variable_get('aleph_base_url', ''),
  );

  $form['aleph']['aleph_base_url_rest'] = array(
    '#type' => 'textfield',
    '#title' => t('Aleph REST base URL'),
    '#description' => t('Base URL for Aleph REST service.'),
    '#required' => TRUE,
    '#default_value' => variable_get('aleph_base_url_rest', ''),
  );

  $form['aleph']['aleph_main_library'] = array(
    '#type' => 'textfield',
    '#title' => t('Aleph Main Library'),
    '#description' => t('The main library. ICE01 for example.'),
    '#required' => TRUE,
    '#default_value' => variable_get('aleph_main_library', ''),
  );

  $form['aleph']['aleph_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('aleph_enable_logging', FALSE),
    '#description' => t('Logs requests to the Aleph webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}

/**
 * Return a fully instantiated AlephClient instance.
 *
 * @return \Drupal\aleph\Aleph\AlephClient|null
 *    The Aleph client.
 */
function aleph_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance trade-off instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    try {
      $client = new AlephClient(
        variable_get('aleph_base_url', ''),
        variable_get('aleph_base_url_rest', ''),
        variable_get('aleph_main_library', '')
      );
    }
    catch (Exception $e) {
      watchdog('aleph', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
      return NULL;
    }
  }
  return $client;
}

/**
 * Return an instance of the AlephPatron by account.
 *
 * @param object $account
 *    A Drupal account object.
 *
 * @return \Drupal\aleph\Aleph\Entity\AlephPatron
 *    The Aleph Patron object.
 */
function aleph_get_patron_by_global_account($account = NULL) {
  $patron_handler = new AlephPatronHandler(aleph_client());
  $credentials = ding_user_get_creds($account);
  return $patron_handler->authenticate($credentials['name'], $credentials['pass'])->getPatron();
}

/**
 * Return an instance of the AlephPatron by credentials.
 *
 * @param string $bor_id
 *    The Aleph patron's ID.
 * @param string $verification
 *    The Aleph patron's verification pin.
 *
 * @return \Drupal\aleph\Aleph\Entity\AlephPatron
 *    The Aleph Patron object.
 */
function aleph_get_patron_by_creds($bor_id, $verification) {
  $patron_handler = new AlephPatronHandler(aleph_client());
  return $patron_handler->authenticate($bor_id, $verification)->getPatron();
}
