<?php

/**
 * @file
 * Pay ding depts using Borgun.Checkout.
 */

use GuzzleHttp\Client as HttpClient;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\RequestException;
use Drupal\aleph\Aleph\Handler\AlephPatronHandler;

/**
 * Implements hook_init().
 */
function ding_borgun_checkout_init() {
  if (user_is_logged_in()) {
    // Don't mess with AJAX requests.
    if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest') {
      return;
    }

    // Allow the logout and debts pages, in addition to the configured allowed
    // pages.
    $patterns = "user/*/status-debts\nuser/logout\n" . variable_get('ding_borgun_checkout_allowed_paths');
    if (drupal_match_path(current_path(), $patterns)) {
      return;
    }

    $client = aleph_client();
    $patron_handler = new AlephPatronHandler($client);
    try {
      $creds = ding_user_get_creds();
    }
    catch (DingProviderAuthException $e) {
      return;
    }
    $patron = $patron_handler->getPatronById($creds['name']);

    $path = NULL;
    // Check if the patron is unregistered.
    if (($patron->getStatus() === 'Unregistered') &&
        variable_get('ding_borgun_checkout_buy_membership_page_enabled', TRUE)) {
      $path = 'membership';
    }

    // Check if the patrons account is expired.
    $current_date = new DateTime('now');
    if (($patron->getExpiryDate() < $current_date) &&
        variable_get('ding_borgun_checkout_renew_membership_page_enabled', TRUE)) {
      $path = 'membership/renew';
    }

    if ($path && current_path() !== $path) {
      drupal_goto($path);
    }
  }
}

/**
 * Implements hook_menu().
 */
function ding_borgun_checkout_menu() {
  $items = array();

  $items['admin/config/ding/ding_borgun_checkout'] = array(
    'title' => 'Ding Borgun.Checkout',
    'description' => 'Configure paying debts using Borgun Checkout.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_borgun_checkout_settings'),
    'access arguments' => array('administer ding provider'),
    'file' => 'ding_borgun_checkout.admin.inc',
  );

  $items['membership'] = array(
    'title' => 'Buy membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_borgun_checkout_membership_form'),
    // Needs to be available for everyone.
    'access callback' => TRUE,
  );

  $items['membership/renew'] = array(
    'title' => 'Renew membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_borgun_checkout_renew_form'),
    // Needs to be available for everyone.
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function ding_borgun_checkout_libraries_info() {
  return array(
    'guzzle' => array(
      'name' => 'Guzzle',
      'vendor url' => 'https://github.com/guzzle/guzzle',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version' => '6.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promises' => array(
      'name' => 'Guzzle promises library',
      'vendor url' => 'https://github.com/guzzle/promises',
      'download url' => 'https://github.com/guzzle/promises',
      'version' => '1.2',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'http-message' => array(
      'name' => 'Common interface for HTTP messages',
      'vendor url' => 'https://github.com/php-fig/http-message',
      'download url' => 'https://github.com/php-fig/http-message',
      'version' => '1.0',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'psr7' => array(
      'name' => 'PSR-7 message implementation',
      'vendor url' => 'https://github.com/guzzle/psr7',
      'download url' => 'https://github.com/guzzle/psr7',
      'version' => '1.3',
      'xautoload' => function ($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_borgun_checkout_ding_provider_user() {
  return array(
    'payment' => array(
      'required' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Rather than implementing a payment provider, we're simply altering the debt
 * form. It allows us to provide a better UX (no redirection back and forth
 * between debts, payment gateway and confirmation pages), is simpler to
 * implement (Borgun JS provides a token that can be passed to their API in form
 * validation/submission). Secondly, we don't have to hack in the form to remove
 * the "pay selected debts" (Aleph only support paying all debts).
 */
function ding_borgun_checkout_form_ding_debt_debts_form_alter(&$form, $form_state) {
  $amount = $form_state['build_info']['args'][2];
  $debts = $form_state['build_info']['args'][0];

  $debt_ids = array_map(function ($debt) {
    return $debt->id;
  }, $debts);
  $form_state['debt_ids'] = $debt_ids;
  $meta = 'Payment for: ' . implode(', ', $debt_ids);

  $form += _ding_borgun_checkout_button(t('Pay'), $amount, $meta);
  $form['#submit'][] = 'ding_borgun_checkout_debt_submit';
}

/**
 * Form submit handler.
 */
function ding_borgun_checkout_debt_submit($form, &$form_state) {
  // Register the payment with debt provider.
  ding_provider_invoke('debt', 'payment_received', $form_state['amount'], $form_state['debt_ids'], $form_state['transaction_id']);
}

/**
 * Get the host to use.
 *
 * Returns the proper hostname for test or live environments.
 *
 * @return string
 *   The base url, without trailing slash.
 */
function _ding_borgun_checkout_host() {
  return variable_get('ding_borgun_checkout_host', 'https://test.borgun.is');
}

/**
 * Get an order id.
 *
 * Returns an unique order id. Borgun order ids needs to be exactly 12
 * characters and can contain A-Z0-9.
 *
 * @return string|null
 *   The order id, or null if locking failed.
 */
function _ding_borgun_checkout_get_order_id() {
  $lock_id = 'ding_borgun_checkout_order_id';
  // Use a lock to ensure that there's only one process that increment the order
  // id at a time.
  $locked = lock_acquire($lock_id);
  if (!$locked) {
    if (!lock_wait($lock_id, 30)) {
      $locked = lock_acquire($lock_id);
    }
  }

  if (!$locked) {
    return NULL;
  }

  $counter = variable_get('ding_borgun_checkout_order_id_next', '1');
  variable_set('ding_borgun_checkout_order_id_next', $counter + 1);
  lock_release($lock_id);
  $prefix = variable_get('ding_borgun_checkout_order_id_prefix', '');
  // Using strlen is safe, we've limited the prefix to A-Z.
  $padding = 12 - strlen($prefix);
  return sprintf('%s%0' . $padding . 'd', $prefix, $counter);
}

/**
 * Capture single use token.
 *
 * Authorizes and captures a payment using a single use token from
 * Borgun.Checkout.
 *
 * @param string $token
 *   Token supplied by Borgun.Checkout.
 * @param int|float $amount
 *   Payment amount. Will be rounded down to two decimal places.
 * @param int $currency_code
 *   The ISO 4217 currency code of the payment.
 * @param string $order_id
 *   Order ID of payment.
 * @param string $meta
 *   Additional information.
 *
 * @return string|false
 *   Transaction id or false on failure.
 */
function _ding_borgun_checkout_capture_token($token, $amount, $currency_code, $order_id, $meta) {
  $body = array(
    "TransactionType" => "Sale",
    // Amount with 2 decimal points, as an integer. JPY is an exception, but
    // we're not supporting that.
    "Amount" => floor($amount * 100),
    // ISO 4217 currency code.
    "Currency" => $currency_code,
    // ISO 8601.
    "TransactionDate" => date("c", REQUEST_TIME),
    "PaymentMethod" => array(
      "PaymentType" => "TokenSingle",
      "Token" => $token,
    ),
    "OrderId" => $order_id,
    "Metadata" => array(
      "Payload" => $meta,
    ),

  );

  $private_token = variable_get('ding_borgun_checkout_private_token', '');

  $options = array(
    'auth' => array($private_token, ''),
    'base_uri' => _ding_borgun_checkout_host() . '/rpg/api/',
  );
  $client = new HttpClient($options);

  try {
    $response = $client->post('payment', array('json' => $body));
  }
  catch (ClientException $e) {
    switch ($e->getCode()) {
      case 400:
        $error = json_decode((string) $e->getResponse()->getBody());
        watchdog('ding_borgun_checkout', 'Form error in capture: @error',
          array('@error' => $error->Message), WATCHDOG_ERROR);
        break;

      case 401:
        watchdog('ding_borgun_checkout', 'Error in capture: Unauthorized',
          array(), WATCHDOG_ERROR);
        break;

      default:
        watchdog('ding_borgun_checkout', 'Unknown client error code %code, please contact the developer, response: @response',
          array(
            '%code' => $response->getStatusCode(),
            '@response' => print_r((string) $e->geetResponse()->getBody(), TRUE),
          ),
          WATCHDOG_WARNING);
    }

    return FALSE;
  }
  catch (Exception $e) {
    if ($e instanceof RequestException && $e->getResponse()) {
      watchdog('ding_borgun_checkout', 'Unrecognized %code response in capture: @response',
        array(
          '%code' => $e->getResponse()->getStatusCode(),
          '@response' => print_r((string) $e->getResponse()->getBody(), TRUE),
        ), WATCHDOG_ERROR);
      return FALSE;
    }
    watchdog('ding_borgun_checkout', 'Error in capture: @message',
      array('@message' => $e->getMessage), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($response->getStatusCode() == 201) {
    $transaction = json_decode((string) $response->getBody());
    if ($transaction->TransactionStatus == 'Accepted') {
      return $transaction->TransactionId;
    }
    else {
      watchdog('ding_borgun_checkout', 'Transation rejected: @response',
        array('@response' => print_r((string) $e->getResponse()->getBody(), TRUE)), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  else {
    watchdog('ding_borgun_checkout', 'Unknown success code %code, please contact the developer',
      array('%code' => $response->getStatusCode()), WATCHDOG_WARNING);
    return "unknown";
  }
}

/**
 * Form for buying membership.
 */
function ding_borgun_checkout_membership_form($form, &$form_state) {
  $form['title'] = array(
    '#prefix' => '<h1>',
    '#markup' => variable_get('ding_borgun_checkout_buy_membership_page_title'),
    '#suffix' => '</h1>',
  );

  $page_text = variable_get('ding_borgun_checkout_buy_membership_page_text', array('value' => 'Page text', 'format' => 'ding_wysiwyg'));
  $form['membership'] = array(
    '#prefix' => '<div class="checkout-container checkout-container__membership">',
    '#markup' => check_markup($page_text['value'], $page_text['format']),
    '#suffix' => '</div>',
  );

  $form += _ding_borgun_checkout_button(
    variable_get('ding_borgun_checkout_buy_membership_page_button'),
    variable_get('ding_borgun_checkout_buy_membership_page_price'),
    ''
  );

  $form['#submit'][] = 'ding_borgun_checkout_membership_form_submit';

  return $form;
}

/**
 * Submit handler for the membership form.
 */
function ding_borgun_checkout_membership_form_submit($form, &$form_state) {
  $client = aleph_client();
  $patron_handler = new AlephPatronHandler($client);
  $patron = $patron_handler->getPatronById();
  $patron_handler->setPatron($patron);

  // Set the expiry date to a year from now.
  $today = new DateTime();
  $expiry_date = $today->add(new DateInterval('P1Y'));
  $patron_handler->setMember($expiry_date);
}

/**
 * Form for renewing membership.
 */
function ding_borgun_checkout_renew_form($form, &$form_state) {
  $form['title'] = array(
    '#prefix' => '<h1>',
    '#markup' => variable_get('ding_borgun_checkout_renew_membership_page_title'),
    '#suffix' => '</h1>',
  );

  $page_text = variable_get('ding_borgun_checkout_renew_membership_page_text', array('value' => 'Page text', 'format' => 'ding_wysiwyg'));
  $form['renew'] = array(
    '#prefix' => '<div class="checkout-container checkout-container__renew">',
    '#markup' => check_markup($page_text['value'], $page_text['format']),
    '#suffix' => '</div>',
  );

  $form += _ding_borgun_checkout_button(
    variable_get('ding_borgun_checkout_renew_membership_page_button'),
    variable_get('ding_borgun_checkout_renew_membership_page_price'),
    ''
  );

  $form['#submit'][] = 'ding_borgun_checkout_renew_form_submit';

  return $form;
}

/**
 * Submit handler for the renew form.
 */
function ding_borgun_checkout_renew_form_submit($form, &$form_state) {
  $client = aleph_client();
  $patron_handler = new AlephPatronHandler($client);
  $patron = $patron_handler->getPatronById();
  $patron_handler->setPatron($patron);

  // Register renewal by setting expiry date to a year from now.
  $today = new DateTime();
  $expiry_date = $today->add(new DateInterval('P1Y'));
  $patron_handler->setExpiryDate($expiry_date);
}

/**
 * Return form fragment for payment button.
 *
 * This could be re-written to a proper form element.
 *
 * @param string $button_text
 *   Text on button.
 * @param mixed $amount
 *   Amount to pay.
 * @param string $meta
 *   Description of payment for payment gateway.
 *
 * @return array
 *   Form elements needed to support the pay button.
 */
function _ding_borgun_checkout_button($button_text, $amount, $meta) {
  $form = array();
  $public_token = variable_get('ding_borgun_checkout_public_token', '');
  if ($public_token && variable_get('ding_borgun_checkout_private_token', '')) {
    // Currently hardcoded.
    $currency = 'ISK';
    // ISO 4217, should match above.
    $currency_code = 352;

    // The hidden variable that Borgun.Checkout returns the token in.
    $form['BorgunCheckoutToken'] = array(
      '#type' => 'hidden',
      '#default_value' => '',
    );

    // Amount and currency is set as data attributes on the button itself.
    $attributes = array(
      'data-amount' => $amount,
      'data-amountcurrencycode' => $currency,
    );

    // Configuration that's set in Drupal.settings and passed to the Borgun JS.
    $settings = array(
      'publictoken' => $public_token,
      'language' => 'IS',
    );

    if (variable_get('ding_borgun_checkout_company_name', '')) {
      $settings['companyname'] = variable_get('ding_borgun_checkout_company_name', '');
    }

    if (variable_get('ding_borgun_checkout_company_slogan', '')) {
      $settings['companyslogan'] = variable_get('ding_borgun_checkout_company_slogan', '');
    }

    $attributes['class'] = array('borgun-checkout');

    $form['pay_all'] = array(
      '#type' => 'submit',
      '#value' => $button_text,
      '#validate' => array('ding_borgun_checkout_validate'),
      '#attributes' => $attributes,
      // Pass info to the validate/submit handlers.
      '#amount' => $amount,
      '#currency' => $currency,
      '#currency_code' => $currency_code,
      '#meta' => $meta,
      '#attached' => array(
        'js' => array(
          // Main Borgun.Checkout script.
          array(
            'type' => 'external',
            'data' => _ding_borgun_checkout_host() .
            '/resources/js/borguncheckout/borguncheckout.v1.min.js',
          ),
          // Icelandic translation.
          array(
            'type' => 'external',
            'data' => _ding_borgun_checkout_host() .
            '/resources/js/borguncheckout/borguncheckout.v1.lang.is.js',
          ),
          array(
            'type' => 'file',
            'data' => drupal_get_path('module', 'ding_borgun_checkout') .
            '/js/ding_borgun_checkout.js',
          ),
          array(
            'type' => 'setting',
            'data' => array('dingBorgunCheckout' => $settings),
          ),
        ),
      ),
    );
  }

  return $form;
}

/**
 * Element validation handler.
 *
 * Try to capture the payment. Sets $form_state['transaction_id'] and
 * $form_state['amount'] for use in submit handlers.
 */
function ding_borgun_checkout_validate($form, &$form_state) {
  $element = $form_state['triggering_element'];

  $order_id = _ding_borgun_checkout_get_order_id();
  if (!$order_id) {
    watchdog('ding_borgun_checkout', 'Could not get lock for order id.', array(), WATCHDOG_ERROR);
    form_set_error('', t('Error acquiring payment, please try again later.'));
  }

  $form_state['transaction_id'] = _ding_borgun_checkout_capture_token(
    $form_state['values']['BorgunCheckoutToken'],
    $element['#amount'],
    $element['#currency_code'],
    $order_id,
    $element['#meta']);
  if (!$form_state['transaction_id']) {
    form_set_error('', t('Error acquiring payment, please try again later.'));
  }

  // Pass amount to submit handlers.
  $form_state['amount'] = $element['#amount'];
}
